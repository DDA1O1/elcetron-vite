# .github/workflows/release.yml

name: Release Electron App

on:
  # Triggers the workflow on pushes that create a tag matching the pattern v*.*.* (e.g., v1.0.0, v1.2.3)
  push:
    tags:
      - 'v*.*.*'

jobs:
  # Job to build for Windows x64
  build-windows-x64:
    runs-on: windows-latest # Use a Windows runner for Squirrel/EXE build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Or your preferred Node version
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      # Explicitly make for win32 x64 using the configured Squirrel maker
      - name: Build Windows x64 (Make)
        run: npm run make -- --platform=win32 --arch=x64

      # Upload the contents of the make output directory for x64
      - name: Upload Windows x64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64-artifact # Unique artifact name for x64 build
          path: out/make/**/* # Upload all files within the make output dir

  # Job to build for Windows ARM64
  build-windows-arm64:
    runs-on: windows-latest # Still needs a Windows runner
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Or your preferred Node version
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      # Explicitly make for win32 arm64 using the configured Squirrel maker
      - name: Build Windows arm64 (Make)
        run: npm run make -- --platform=win32 --arch=arm64 # Target arm64

      # Upload the contents of the make output directory for ARM64
      - name: Upload Windows arm64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-arm64-artifact # Unique artifact name for ARM64 build
          path: out/make/**/* # Upload all files within the make output dir

  # Job to build for Linux x64 and arm64
  build-linux:
    runs-on: ubuntu-latest # Use a Linux runner for Deb builds
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Or your preferred Node version
          cache: 'npm'

      # Install dependencies needed for building arm64 deb on x64 runner
      - name: Install Linux Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends dpkg fakeroot

      - name: Install Project Dependencies
        run: npm ci

      # Explicitly make for linux x64 using the configured Deb maker
      - name: Build Linux x64 (Make)
        run: npm run make -- --platform=linux --arch=x64

      # Explicitly make for linux arm64 using the configured Deb maker
      - name: Build Linux arm64 (Make)
        run: npm run make -- --platform=linux --arch=arm64

      # Upload the contents of the make output directory (contains both .deb files)
      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: out/make/**/*

 # Job to create the GitHub Release and upload all built artifacts
 release:
  runs-on: ubuntu-latest
  # Depends on all three build jobs completing successfully
  needs: [build-windows-x64, build-windows-arm64, build-linux]
  permissions:
    contents: write # Needed to create releases and upload assets

  steps:
    - name: Checkout Repository # Needed to get tag info
      uses: actions/checkout@v4

    # Create a directory to download all artifacts into
    - name: Create Staging Directory
      run: mkdir staging

    # Download the artifact from the Windows x64 build job
    - name: Download Windows x64 Artifact
      uses: actions/download-artifact@v4
      with:
        name: windows-x64-artifact
        path: staging/windows-x64

    # Download the artifact from the Windows ARM64 build job
    - name: Download Windows arm64 Artifact
      uses: actions/download-artifact@v4
      with:
        name: windows-arm64-artifact
        path: staging/windows-arm64

    # Download the artifact from the Linux build job
    - name: Download Linux Artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-artifacts
        path: staging/linux # Linux filenames should already be unique by arch

    # --- NEW ROBUST RENAMING STEPS ---
    - name: Rename Windows x64 Artifacts for Uniqueness
      working-directory: staging/windows-x64 # Run commands inside this dir
      run: |
        echo "--- Files before renaming in windows-x64 ---"
        ls -l
        for FILE in *; do
          if [[ -f "$FILE" ]]; then # Ensure it's a file
            # Separate filename and extension
            FILENAME="${FILE%.*}"
            EXTENSION="${FILE##*.}"
            # Handle files with no extension or same name (like RELEASES)
            if [[ "$FILENAME" == "$EXTENSION" ]] || [[ "$FILENAME" == "" ]]; then
               NEW_NAME="${FILE}-x64"
            else
               NEW_NAME="${FILENAME}-x64.${EXTENSION}"
            fi
            echo "Renaming '$FILE' to '$NEW_NAME'"
            mv "$FILE" "$NEW_NAME"
          fi
        done
        echo "--- Files after renaming in windows-x64 ---"
        ls -l

    - name: Rename Windows arm64 Artifacts for Uniqueness
      working-directory: staging/windows-arm64 # Run commands inside this dir
      run: |
        echo "--- Files before renaming in windows-arm64 ---"
        ls -l
        for FILE in *; do
          if [[ -f "$FILE" ]]; then # Ensure it's a file
            # Separate filename and extension
            FILENAME="${FILE%.*}"
            EXTENSION="${FILE##*.}"
            # Handle files with no extension or same name (like RELEASES)
            if [[ "$FILENAME" == "$EXTENSION" ]] || [[ "$FILENAME" == "" ]]; then
               NEW_NAME="${FILE}-arm64"
            else
               NEW_NAME="${FILENAME}-arm64.${EXTENSION}"
            fi
            echo "Renaming '$FILE' to '$NEW_NAME'"
            mv "$FILE" "$NEW_NAME"
          fi
        done
        echo "--- Files after renaming in windows-arm64 ---"
        ls -l
    # --- END OF NEW RENAMING STEPS ---

    # List final files in staging for verification
    - name: List final staging files Tree
      run: ls -R staging

    # Use a dedicated action to create the release and upload artifacts
    - name: Create GitHub Release and Upload Artifacts
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        # Upload all files found within the staging directory and its subdirectories
        # The renamed files should now have unique names like *-x64.exe, *-arm64.exe
        files: staging/**/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}