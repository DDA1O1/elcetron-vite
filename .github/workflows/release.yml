name: Release Electron App

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  # Job to build for Windows x64
  build-windows:
    runs-on: windows-latest # Use a Windows runner for Squirrel/EXE build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      # Explicitly make for win32 x64 using the configured Squirrel maker
      - name: Build Windows x64 (Make)
        run: npm run make -- --platform=win32 --arch=x64

      # Upload the contents of the make output directory
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64-artifact # Name of the artifact bundle
          path: out/make/**/* # Upload all files within the make output dir

  # Job to build for Linux x64 and arm64
  build-linux:
    runs-on: ubuntu-latest # Use a Linux runner for Deb builds
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Install dependencies needed for building arm64 deb on x64 runner
      - name: Install Linux Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends dpkg fakeroot

      - name: Install Project Dependencies
        run: npm ci

      # Explicitly make for linux x64 using the configured Deb maker
      - name: Build Linux x64 (Make)
        run: npm run make -- --platform=linux --arch=x64

      # Explicitly make for linux arm64 using the configured Deb maker
      - name: Build Linux arm64 (Make)
        run: npm run make -- --platform=linux --arch=arm64

      # Upload the contents of the make output directory
      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts # Name of the artifact bundle (contains both x64 and arm64 debs)
          path: out/make/**/* # Upload all files within the make output dir

  # Job to create the GitHub Release and upload all built artifacts
  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux] # Run only after build jobs complete successfully
    permissions:
      contents: write # Needed to create releases and upload assets

    steps:
      - name: Checkout Repository # Needed to get tag info
        uses: actions/checkout@v4

      # Create a directory to download artifacts into
      - name: Create Staging Directory
        run: mkdir staging

      # Download the artifact from the Windows build job
      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-x64-artifact
          path: staging/windows # Download into staging/windows

      # Download the artifact from the Linux build job
      - name: Download Linux Artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts
          path: staging/linux # Download into staging/linux

      # Use a dedicated action to create the release and upload artifacts
      - name: Create GitHub Release and Upload Artifacts
        uses: softprops/action-gh-release@v2
        with:
          # Use the tag that triggered the workflow as the release tag
          tag_name: ${{ github.ref_name }}
          # Use the tag name as the release name
          name: Release ${{ github.ref_name }}
          # Optional: Mark as pre-release if the tag looks like a pre-release (e.g., v1.0.0-beta.1)
          # prerelease: contains(github.ref, '-beta') || contains(github.ref, '-alpha')
          # Upload all files from the staging directory (includes subdirs)
          files: staging/**/*
        env:
          # The GITHUB_TOKEN is required by softprops/action-gh-release
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}